<?xml version="1.0" ?>
<!-- =================================================================================== -->
<!-- |    This document was autogenerated by xacro from heron.urdf.xacro               | -->
<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->
<!-- =================================================================================== -->
<!--
Copyright (c) 2012-2016, Clearpath Robotics
All rights reserved.
Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
    * Neither the name of Clearpath Robotics nor the
      names of its contributors may be used to endorse or promote products
      derived from this software without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
This program contains the description of the robot base model for the Clearpath Heron
-->
<robot name="heron">
  <!--
    Vehicle's parameters (remember to enter the model parameters below)
  -->
  <material name="gray">
    <color rgba="0.7 0.7 0.7 1.0"/>
  </material>
  <material name="dark_gray">
    <color rgba="0.2 0.2 0.2 1.0"/>
  </material>
  <material name="yellow">
    <color rgba="0.8 0.8 0.0 1.0"/>
  </material>
  <!-- Rigid body description of the base link -->
  <link name="base_link">
    <!--
          Be careful to setup the coefficients for the inertial tensor,
          otherwise your model will become unstable on Gazebo
        -->
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://heron_description/meshes/heron_base.stl" scale="1 1 1"/>
      </geometry>
      <material name="dark_gray"/>
    </visual>
    <collision>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://heron_description/meshes/heron_collision.stl" scale="1 1 1"/>
      </geometry>
    </collision>
  </link>
  <!-- Dummy Link to contain the inertial information for base_link -->
  <link name="dummy_link">
    <inertial>
      <mass value="28"/>
      <origin rpy="0 0 0" xyz="0 0 -0.13"/>
      <inertia ixx="10" ixy="0" ixz="0" iyy="10" iyz="0" izz="10"/>
      <!-- <inertia ixx="0.017474" ixy="-0.000013" ixz="-0.000102"
                                  iyy="0.017781"  iyz="-0.000058"
                                                  izz="0.033235" /> -->
    </inertial>
  </link>
  <joint name="dummy_to_base" type="fixed">
    <parent link="base_link"/>
    <child link="dummy_link"/>
  </joint>
  <gazebo reference="base_link">
    <selfCollide>false</selfCollide>
    <material>Gazebo/DarkGrey</material>
    <gravity>1</gravity>
  </gazebo>
  <!-- Set up hydrodynamic plugin given as input parameter -->
  <gazebo>
    <plugin filename="libuuv_underwater_object_ros_plugin.so" name="uuv_plugin">
      <fluid_density>1028.0</fluid_density>
      <flow_velocity_topic>hydrodynamics/current_velocity</flow_velocity_topic>
      <debug>0</debug>
      <!-- List of hydrodynamic models this robot's links -->
      <link name="base_link">
        <volume>0.13</volume>
        <box>
          <width>1.0</width>
          <length>1.35</length>
          <height>0.32</height>
        </box>
        <center_of_buoyancy>0 0 0</center_of_buoyancy>
        <!-- The buoyancy plugin in the UUV Simulator can then be adapted
                   to receive the additional parameters used to describe the
                   buoyancy force computation for the surface vessel.
              -->
        <metacentric_width>0.1</metacentric_width>
        <metacentric_length>0.1</metacentric_length>
        <submerged_height>0.02</submerged_height>
        <hydrodynamic_model>
          <type>fossen</type>
          <added_mass>
                     0   0   0   0   0   0
                     0   0   0   0   0   0
                     0   0   0   0   0   0
                     0   0   0   0   0   0
                     0   0   0   0   0   0
                     0   0   0   0   0   0
                </added_mass>
          <offset_added_mass>0</offset_added_mass>
          <linear_damping>
                      -16.44998712 -15.79776044 -100 -13 -13 -6
                  </linear_damping>
          <quadratic_damping>
                    -2.942 -2.7617212 -10 -5 -5 -5
                  </quadratic_damping>
          <!-- Sanity check -->
          <linear_damping_forward_speed>
                    0 0 0 0 0 0
                  </linear_damping_forward_speed>
          <offset_linear_damping>
                    0
                  </offset_linear_damping>
          <offset_lin_forward_speed_damping>
                    0
                  </offset_lin_forward_speed_damping>
          <offset_nonlin_damping>
                    0
                  </offset_nonlin_damping>
          <scaling_damping>1.0</scaling_damping>
        </hydrodynamic_model>
      </link>
      <!--
          In case other modules are added to the vehicle (such as a manipulator)
          that also have link running with the underwater object plugin, they
          should also be added in this block. For this, this new module should
          have a file similar to gazebo.xacro above with the description of the
          parameter necessary for the underwater object plugin to be initialized.
        -->
    </plugin>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="thruster_0">
    <visual>
      <geometry>
        <mesh filename="package://heron_description/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="thruster_0_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.53 -0.377654 -0.16"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="thruster_0"/>
  </joint>
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="thruster_0_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>thruster_0</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>thruster_0_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>0</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <clampMax>100</clampMax>
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <clampMin>-100</clampMin>
      <!-- Minimum and maximum thrust force output allowed -->
      <thrustMin>-35</thrustMin>
      <thrustMax>35</thrustMax>
      <!--
          Value from 0 to 1 to set the efficiency of the output thrust force
          Default value is 1.0
          -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
          Value from 0 to 1 to set the efficiency of the propeller as a factor
          to be multiplied to the current value of the state variable at each
          iteration.
          Default value is 1.0
          -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <!-- 3) Linear interpolation
          If you have access to the thruster's data sheet, for example,
          you can enter samples of the curve's input and output values
          and the thruster output will be found through linear interpolation
          of the given samples.
          -->
      <conversion>
        <type>LinearInterp</type>
        <inputValues>-1.0 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1.0</inputValues>
        <outputValues>-19.88 -16.52 -12.6 -5.6 -1.4 0.0 2.24 9.52 21.28 28.0 33.6</outputValues>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="thruster_0">
    <selfCollide>false</selfCollide>
  </gazebo>
  <!--
    Dummy link as place holder for the thruster frame,
    since thrusters can often be inside the collision geometry
    of the vehicle and may cause internal collisions if set otherwise
    -->
  <link name="thruster_1">
    <visual>
      <geometry>
        <mesh filename="package://heron_description/meshes/prop.dae" scale="1 1 1"/>
      </geometry>
    </visual>
    <inertial>
      <mass value="0.001"/>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <inertia ixx="0.000000017" ixy="0.0" ixz="0.0" iyy="0.000000017" iyz="0.0" izz="0.000000017"/>
    </inertial>
  </link>
  <!-- Joint between thruster link and vehicle base link -->
  <joint name="thruster_1_joint" type="continuous">
    <origin rpy="0 0 0" xyz="-0.53 0.377654 -0.16"/>
    <axis xyz="1 0 0"/>
    <parent link="base_link"/>
    <child link="thruster_1"/>
  </joint>
  <gazebo>
    <!-- Thruster ROS plugin -->
    <plugin filename="libuuv_thruster_ros_plugin.so" name="thruster_1_thruster_model">
      <!-- Name of the thruster link -->
      <linkName>thruster_1</linkName>
      <!-- Name of the joint between thruster and vehicle base link -->
      <jointName>thruster_1_joint</jointName>
      <!-- Make the thruster aware of its id -->
      <thrusterID>1</thrusterID>
      <!-- Gain of the input command signal -->
      <gain>1</gain>
      <!-- Maximum allowed input value for the input signal for thruster unit -->
      <clampMax>100</clampMax>
      <!-- Minimum allowed value for the input signal for thruster unit -->
      <clampMin>-100</clampMin>
      <!-- Minimum and maximum thrust force output allowed -->
      <thrustMin>-35</thrustMin>
      <thrustMax>35</thrustMax>
      <!--
          Value from 0 to 1 to set the efficiency of the output thrust force
          Default value is 1.0
          -->
      <thrust_efficiency>1</thrust_efficiency>
      <!--
          Value from 0 to 1 to set the efficiency of the propeller as a factor
          to be multiplied to the current value of the state variable at each
          iteration.
          Default value is 1.0
          -->
      <propeller_efficiency>1</propeller_efficiency>
      <!-- 2) First order model -->
      <dynamics>
        <type>FirstOrder</type>
        <timeConstant>0.05</timeConstant>
      </dynamics>
      <!-- 3) Linear interpolation
          If you have access to the thruster's data sheet, for example,
          you can enter samples of the curve's input and output values
          and the thruster output will be found through linear interpolation
          of the given samples.
          -->
      <conversion>
        <type>LinearInterp</type>
        <inputValues>-1.0 -0.8 -0.6 -0.4 -0.2 0 0.2 0.4 0.6 0.8 1.0</inputValues>
        <outputValues>-19.88 -16.52 -12.6 -5.6 -1.4 0.0 2.24 9.52 21.28 28.0 33.6</outputValues>
      </conversion>
    </plugin>
  </gazebo>
  <gazebo reference="thruster_1">
    <selfCollide>false</selfCollide>
  </gazebo>
  s

    
  <!-- GPS -->
  <gazebo>
    <plugin filename="libhector_gazebo_ros_gps.so" name="gps_controller">
      <updateRate>40</updateRate>
      <robotNamespace>/</robotNamespace>
      <frameId>navsat_link</frameId>
      <bodyName>navsat_link</bodyName>
      <topicName>/navsat/fix</topicName>
      <velocityTopicName>/navsat/velocity</velocityTopicName>
      <referenceLatitude>49.9</referenceLatitude>
      <referenceLongitude>8.9</referenceLongitude>
      <referenceHeading>90</referenceHeading>
      <referenceAltitude>0</referenceAltitude>
      <drift>0.0001 0.0001 0.0001</drift>
    </plugin>
  </gazebo>
  <link name="navsat_link"/>
  <joint name="navsat_joint" type="fixed">
    <parent link="base_link"/>
    <child link="navsat_link"/>
    <origin rpy="0.0 0.0 0.0" xyz="0.015 0.050 0.072"/>
  </joint>
  <!-- IMU -->
  <gazebo>
    <plugin filename="libhector_gazebo_ros_imu.so" name="imu_controller">
      <robotNamespace>/</robotNamespace>
      <updateRate>50.0</updateRate>
      <bodyName>imu_link</bodyName>
      <frameId>imu_link</frameId>
      <topicName>/imu/data_raw</topicName>
      <accelDrift>0.005 0.005 0.005</accelDrift>
      <accelGaussianNoise>0.005 0.005 0.005</accelGaussianNoise>
      <rateDrift>0.005 0.005 0.005 </rateDrift>
      <rateGaussianNoise>0.005 0.005 0.005 </rateGaussianNoise>
      <headingDrift>0.005</headingDrift>
      <headingGaussianNoise>0.005</headingGaussianNoise>
    </plugin>
  </gazebo>
  <link name="imu_link"/>
  <joint name="imu_joint" type="fixed">
    <origin rpy="0 0.0 0.0" xyz="-0.1397 0.0 0"/>
    <parent link="base_link"/>
    <child link="imu_link"/>
  </joint>
  <!-- Magnetometer -->
  <gazebo>
    <plugin filename="libhector_gazebo_ros_magnetic.so" name="mag_controller">
      <updateRate>50</updateRate>
      <robotNamespace>/</robotNamespace>
      <bodyName>imu_link</bodyName>
      <frameId>imu_link</frameId>
      <topicName>/imu/mag_raw</topicName>
      <referenceHeading>90</referenceHeading>
      <drift>0.0005 0.0005 0.0005</drift>
      <gaussianNoise>0.025 0.025 0.025</gaussianNoise>
      <useMagneticFieldMsgs>false</useMagneticFieldMsgs>
    </plugin>
  </gazebo>
  <!-- Mount a Perfect Pose 3D sensor. -->
  <gazebo>
    <plugin filename="libgazebo_ros_p3d.so" name="groundtruth_sim">
      <updateRate>20.0</updateRate>
      <robotNamespace>/</robotNamespace>
      <bodyName>base_link</bodyName>
      <topicName>/pose_gt</topicName>
      <gaussianNoise>0.0</gaussianNoise>
      <frameName>world</frameName>
    </plugin>
  </gazebo>
  <!-- location flips the panel. 1 is for the left and -1 is for the right -->
  <joint name="base_left_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 0.34495 0.04959"/>
    <parent link="base_link"/>
    <child link="left_panel_link"/>
  </joint>
  <link name="left_panel_link">
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0.00000000 0.00000000 0.00000000"/>
      <inertia ixx="0.01" ixy="0.00" ixz="0.00" iyy="0.01" iyz="0.00" izz="0.01"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://heron_description/meshes/left_panel.stl"/>
      </geometry>
      <material name="yellow"/>
    </visual>
  </link>
  <gazebo reference="left_panel_link">
    <material>Gazebo/Yellow</material>
  </gazebo>
  <!-- location flips the panel. 1 is for the left and -1 is for the right -->
  <joint name="base_right_joint" type="fixed">
    <origin rpy="0 0 0" xyz="0.0 -0.34495 0.04959"/>
    <parent link="base_link"/>
    <child link="right_panel_link"/>
  </joint>
  <link name="right_panel_link">
    <inertial>
      <mass value="0.1"/>
      <origin xyz="0.00000000 0.00000000 0.00000000"/>
      <inertia ixx="0.01" ixy="0.00" ixz="0.00" iyy="0.01" iyz="0.00" izz="0.01"/>
    </inertial>
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://heron_description/meshes/right_panel.stl"/>
      </geometry>
      <material name="yellow"/>
    </visual>
  </link>
  <gazebo reference="right_panel_link">
    <material>Gazebo/Yellow</material>
  </gazebo>
  <!--
    As you add to this URDF, please be aware that both the robot and
    simulation include it. You must retain compatibility with all of
    the following launch files:

    heron_viz/launch/view_model.launch
    heron_gazebo/launch/heron_world.launch
    heron_base/launch/base.launch
  -->
  <link name="rear_plate">
    <visual>
      <origin rpy="0 0 0" xyz="0 0 0"/>
      <geometry>
        <mesh filename="package://heron_description/meshes/plain-rear-plate.stl"/>
      </geometry>
      <material name="dark_gray"/>
    </visual>
  </link>
  <joint name="rear_plate_joint" type="fixed">
    <parent link="base_link"/>
    <child link="rear_plate"/>
    <origin xyz="-0.1915 0.0 0.001"/>
  </joint>
  <gazebo reference="rear_plate">
    <material>Gazebo/DarkGrey</material>
  </gazebo>
  <!-- This file is a placeholder which is included by default from
       heron.urdf.xacro. If a robot is being customized and requires
       additional URDF, set the HERON_URDF_EXTRAS environment variable
       to the full path of the file you would like included. -->
  <!-- Joint state publisher plugin -->
  <gazebo>
    <plugin filename="libuuv_joint_state_publisher.so" name="joint_state_publisher">
      <robotNamespace>/</robotNamespace>
      <updateRate>10</updateRate>
    </plugin>
  </gazebo>
</robot>

